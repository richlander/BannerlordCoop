@using RazorLight
@using Scaffolderlord
@using Scaffolderlord.Models.E2E
@inherits TemplatePage<E2EPropertyTestsTemplateModel>
@foreach (var item in Model.Usings)
{
	<text>using @item;</text>
	@Model.NewLine
}
using E2E.Tests.Environment;
using E2E.Tests.Environment.Instance;
using E2E.Tests.Util;
using HarmonyLib;
using System.Reflection;
using Xunit.Abstractions;
using Common.Util;
using static Common.Extensions.ReflectionExtensions;

namespace @Model.Namespace

public class @(Model.TypeName)PropertyTests : IDisposable
{
    private readonly List<MethodBase> disabledMethods;
    private E2ETestEnvironment TestEnvironment { get; }
    private EnvironmentInstance Server => TestEnvironment.Server;
    private IEnumerable<EnvironmentInstance> Clients => TestEnvironment.Clients;
    private IEnumerable<EnvironmentInstance> AllEnvironmentInstances => Clients.Append(Server);

    private readonly string @(Model.TypeName.CamelCase())Id;

    public @(Model.TypeName)PropertyTests(ITestOutputHelper output)
    {
        TestEnvironment = new E2ETestEnvironment(output);

        disabledMethods = new List<MethodBase> {
            //Add your disabled methods
        };

        // Create @(Model.TypeName) on the server
        @(Model.TypeName.CamelCase())Id = TestEnvironment.CreateRegisteredObject<@(Model.TypeName)>(disabledMethods);
    }

    public void Dispose()
    {
        TestEnvironment.Dispose();
    }

@foreach(var structProp in Model.GetStructProps())
{
    <text>
    [Fact]
    public void ServerChange@($"{Model.TypeName}{structProp.Name}")_SyncAllClients()
    {
        // Arrange
        Assert.True(Server.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var server@(Model.TypeName)));
        var newValue=Random<@structProp.PropertyType.Name>();

        // Act
        Server.Call(() =>
        {
            server@(Model.TypeName).@structProp.Name = newValue;
        });

        // Assert
        foreach (var client in TestEnvironment.Clients)
        {
            Assert.True(client.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var client@(Model.TypeName)));
            Assert.Equal(server@(Model.TypeName).@structProp.Name, client@(Model.TypeName).@structProp.Name);
        }
    }
    
    [Fact]
    public void ClientChange@($"{Model.TypeName}{structProp.Name}")_DoesNothing()
    {
        // Arrange
        Assert.True(Server.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var server@(Model.TypeName)));
        var newValue=Random<@structProp.PropertyType.Name>();

        // Act
        var firstClient = Clients.First();
        firstClient.Call(() =>
        {
            // Gets instance on client
            Assert.True(client.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var client@(Model.TypeName)));
            // Attempts to change value
            client@(Model.TypeName).@structProp.Name = newValue;

        });

        // Assert
        foreach (var client in AllEnvironmentInstances.Where(c => c != firstClient))
        {
            Assert.True(client.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var client@(Model.TypeName)));
            Assert.NotEqual(server@(Model.TypeName).@structProp.Name, client@(Model.TypeName).@structProp.Name);
        }
    }
    </text>
}

@foreach(var classProp in Model.GetClassProps())
{
    <text>
    [Fact]
    public void ServerChange@(Model.TypeName)@(classProp.Name.PascalCase())_SyncAllClients()
    {
        // Arrange
        string? @(classProp.Name.CamelCase())Id=null;
        Assert.True(Server.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var server@(Model.TypeName)));
        Assert.True(Server.ObjectManager.TryGetObject<@(classProp.PropertyType.Name)>(@(classProp.Name.CamelCase())Id, out var server@(classProp.Name.PascalCase())));

        // Act
        Server.Call(() =>
        {
            server@(Model.TypeName).@(classProp.Name) = server@(classProp.Name.PascalCase());
        });

        // Assert
        foreach (var client in TestEnvironment.Clients)
        {
            Assert.True(client.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var client@(Model.TypeName)));
            client.ObjectManager.TryGetId(client@(Model.TypeName).@(classProp.Name), out string client@(classProp.Name.PascalCase())Id);
            Assert.Equal(client@(classProp.Name.PascalCase())Id, @(classProp.Name.CamelCase())Id);
        }
    }

@*     [Fact] // DoesNothing WIP
    public void ClientChange@(Model.TypeName)@(classProp.Name.PascalCase())_DoesNothing()
    {
        // Arrange
        string? @(classProp.Name.CamelCase())Id=null;
        Assert.True(Server.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var server@(Model.TypeName)));
        Assert.True(Server.ObjectManager.TryGetObject<@(classProp.PropertyType.Name)>(@(classProp.Name.CamelCase())Id, out var server@(classProp.Name.PascalCase())));

        // Act
        var firstClient = Clients.First();
        firstClient.Call(() =>
        {
            // Gets instance on client
            Assert.True(client.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var client@(Model.TypeName)));
            // Attempts to change value
            client@(Model.TypeName).@classProp.Name = newValue;
        });

        // Assert
        var firstClient = Clients.First();
        firstClient.Call(() =>
        {
            Assert.True(client.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var client@(Model.TypeName)));
            client.ObjectManager.TryGetId(client@(Model.TypeName).@(classProp.Name), out string client@(classProp.Name.PascalCase())Id);
            Assert.NotEqual(client@(classProp.Name.PascalCase())Id, @(classProp.Name.CamelCase())Id);
        }
    } *@
    </text>
}
}
