@using RazorLight
@using Scaffolderlord.Models.E2E
@using static Scaffolderlord.Extensions
@inherits TemplatePage<E2ELifetimeTestsTemplateModel>
@foreach (var item in Model.Usings)
{
	<text>using @item;</text>
	@Model.NewLine
}
using E2E.Tests.Environment;
using E2E.Tests.Environment.Instance;
using E2E.Tests.Util;
using HarmonyLib;
using System.Reflection;
using Xunit.Abstractions;
using static Common.Extensions.ReflectionExtensions;

namespace @Model.Namespace

public class @(Model.TypeName)LifetimeTests : IDisposable
{
    private readonly List<MethodBase> disabledMethods;
    private E2ETestEnvironment TestEnvironment { get; }
    private EnvironmentInstance Server => TestEnvironment.Server;
    private IEnumerable<EnvironmentInstance> Clients => TestEnvironment.Clients;
    private IEnumerable<EnvironmentInstance> AllEnvironmentInstances => Clients.Append(Server);

    private readonly string @(Model.TypeName.CamelCase())Id;

    public @(Model.TypeName)LifetimeTests(ITestOutputHelper output)
    {
        TestEnvironment = new E2ETestEnvironment(output);

        disabledMethods = new List<MethodBase> {
            //Add your disabled methods
        };
    }

    public void Dispose()
    {
        TestEnvironment.Dispose();
    }

        [Fact]
    public void ServerCreate@(Model.TypeName)_SyncAllClients()
    {
        // Arrange
        string? @(Model.TypeName.CamelCase())Id = null;

        // Act
        Server.Call(() =>
        {
            var @(Model.TypeName.CamelCase()) = GameObjectCreator.CreateInitializedObject<@(Model.TypeName)>();
            Assert.True(Server.ObjectManager.TryGetId(@(Model.TypeName.CamelCase()), out @(Model.TypeName.CamelCase())Id));
        }, disabledMethods
        );

        // Assert
        Assert.NotNull(@(Model.TypeName.CamelCase())Id);

        foreach (var client in TestEnvironment.Clients)
        {
            Assert.True(client.ObjectManager.TryGetObject<@(Model.TypeName)>(@(Model.TypeName.CamelCase())Id, out var _));
        }
    }

    [Fact]
    public void ClientCreate@(Model.TypeName)_DoesNothing()
    {
        // Arrange
        string? client@(Model.TypeName)Id = null;

        // Act
        var firstClient = TestEnvironment.Clients.First();
        firstClient.Call(() =>
        {
            var @(Model.TypeName) = ObjectHelper.SkipConstructor<@(Model.TypeName)>();

            Assert.False(firstClient.ObjectManager.TryGetId(@(Model.TypeName), out client@(Model.TypeName)Id));
        });

        // Assert
        Assert.Null(client@(Model.TypeName)Id);
    }
}

    